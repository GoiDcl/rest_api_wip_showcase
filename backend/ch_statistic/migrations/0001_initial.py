# Generated by Django 5.0.3 on 2024-11-19 14:39

import clickhouse_backend.models
import django.db.models.manager
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ADStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', clickhouse_backend.models.DateTimeField(auto_now_add=True, verbose_name='Запись создана')),
                ('played', clickhouse_backend.models.DateTimeField(verbose_name='Когда было проиграно')),
                ('file', clickhouse_backend.models.StringField(max_length=36, verbose_name='Идентификатор файла')),
                ('client', clickhouse_backend.models.StringField(max_length=36, verbose_name='Идентификатор номенклатуры')),
                ('length', clickhouse_backend.models.UInt16Field(verbose_name='Хронометраж')),
                ('ad_block', clickhouse_backend.models.UInt32Field(verbose_name='Рекламный блок')),
            ],
            options={
                'verbose_name': 'Статистика рекламы',
                'verbose_name_plural': 'Статистика рекламы',
                'db_table': 'ad_stat',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ImageStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', clickhouse_backend.models.DateTimeField(auto_now_add=True, verbose_name='Запись создана')),
                ('played', clickhouse_backend.models.DateTimeField(verbose_name='Когда было проиграно')),
                ('file', clickhouse_backend.models.StringField(max_length=36, verbose_name='Идентификатор файла')),
                ('client', clickhouse_backend.models.StringField(max_length=36, verbose_name='Идентификатор номенклатуры')),
                ('length', clickhouse_backend.models.UInt16Field(verbose_name='Хронометраж')),
            ],
            options={
                'verbose_name': 'Статистика изображений',
                'verbose_name_plural': 'Статистика изображений',
                'db_table': 'image_stat',
                'ordering': ['-played'],
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='MusicStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', clickhouse_backend.models.DateTimeField(auto_now_add=True, verbose_name='Запись создана')),
                ('played', clickhouse_backend.models.DateTimeField(verbose_name='Когда было проиграно')),
                ('file', clickhouse_backend.models.StringField(max_length=36, verbose_name='Идентификатор файла')),
                ('client', clickhouse_backend.models.StringField(max_length=36, verbose_name='Идентификатор номенклатуры')),
                ('length', clickhouse_backend.models.UInt16Field(verbose_name='Хронометраж')),
            ],
            options={
                'verbose_name': 'Статистика музыки',
                'verbose_name_plural': 'Статистика музыки',
                'db_table': 'music_stat',
                'ordering': ['-played'],
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TickerStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', clickhouse_backend.models.DateTimeField(auto_now_add=True, verbose_name='Запись создана')),
                ('played', clickhouse_backend.models.DateTimeField(verbose_name='Когда было проиграно')),
                ('file', clickhouse_backend.models.StringField(max_length=36, verbose_name='Идентификатор файла')),
                ('client', clickhouse_backend.models.StringField(max_length=36, verbose_name='Идентификатор номенклатуры')),
                ('length', clickhouse_backend.models.UInt16Field(verbose_name='Хронометраж')),
            ],
            options={
                'verbose_name': 'Статистика бегущей строки',
                'verbose_name_plural': 'Статистика бегущих строк',
                'db_table': 'ticker_stat',
                'ordering': ['-played'],
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='VideoStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', clickhouse_backend.models.DateTimeField(auto_now_add=True, verbose_name='Запись создана')),
                ('played', clickhouse_backend.models.DateTimeField(verbose_name='Когда было проиграно')),
                ('file', clickhouse_backend.models.StringField(max_length=36, verbose_name='Идентификатор файла')),
                ('client', clickhouse_backend.models.StringField(max_length=36, verbose_name='Идентификатор номенклатуры')),
                ('length', clickhouse_backend.models.UInt16Field(verbose_name='Хронометраж')),
            ],
            options={
                'verbose_name': 'Статистика видео',
                'verbose_name_plural': 'Статистика видео',
                'db_table': 'video_stat',
                'ordering': ['-played'],
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('_overwrite_base_manager', django.db.models.manager.Manager()),
            ],
        ),
    ]
